/* eslint-disable camelcase */
import { DEFAULT_ROW_COUNT } from '@redhat-cloud-services/frontend-components-utilities';

// fixtures generated by prism mock server
import fixtures from '../fixtures/groups.json';
import groupsSecondPage from '../fixtures/groupsSecondPage.json';
import groupDetailFixtures from '../fixtures/groups/620f9ae75A8F6b83d78F3B55Af1c4b2C.json';
import hostsFixtures from '../fixtures/hosts.json';

export const groupsInterceptors = {
    'successful with some items': () =>
        cy
        .intercept('GET', '/api/inventory/v1/groups*', {
            statusCode: 200,
            body: fixtures
        })
        .as('getGroups'),
    'successful with some items second page': () =>
        cy
        .intercept('GET', '/api/inventory/v1/groups?*page=2&perPage=50*', {
            statusCode: 200,
            body: groupsSecondPage
        })
        .as('getGroupsSecond'),
    'successful empty': () =>
        cy
        .intercept('GET', '/api/inventory/v1/groups*', {
            statusCode: 200,
            body: {
                count: 0,
                page: 1,
                per_page: DEFAULT_ROW_COUNT,
                total: 0
            }
        })
        .as('getGroups'),
    'failed with server error': () => {
        Cypress.on('uncaught:exception', () => {
            return false;
        });
        cy.intercept('GET', '/api/inventory/v1/groups*', { statusCode: 500 }).as(
            'getGroups'
        );
    },
    'long responding': () => {
        cy.intercept('GET', '/api/inventory/v1/groups*', {
            statusCode: 200,
            body: fixtures,
            delay: 42000000 // milliseconds
        }).as('getGroups');
    }
};

export const groupDetailInterceptors = {
    successful: () =>
        cy
        .intercept(
            'GET',
            '/api/inventory/v1/groups/620f9ae75A8F6b83d78F3B55Af1c4b2C',
            {
                statusCode: 200,
                body: groupDetailFixtures
            }
        )
        .as('getGroupDetail'),
    empty: () =>
        cy
        .intercept(
            'GET',
            '/api/inventory/v1/groups/620f9ae75A8F6b83d78F3B55Af1c4b2C',
            { statusCode: 404 }
        )
        .as('getGroupDetail'),
    'failed with server error': () => {
        Cypress.on('uncaught:exception', () => {
            return false;
        });
        cy.intercept(
            'GET',
            '/api/inventory/v1/groups/620f9ae75A8F6b83d78F3B55Af1c4b2C',
            { statusCode: 500 }
        ).as('getGroupDetail');
    },
    'long responding': () => {
        cy.intercept(
            'GET',
            '/api/inventory/v1/groups/620f9ae75A8F6b83d78F3B55Af1c4b2C',
            {
                statusCode: 200,
                body: groupDetailFixtures,
                delay: 42000000 // milliseconds
            }
        )
        .as('getGroupDetail');
    },
    'patch successful': () => {
        cy
        .intercept('PATCH', '/api/inventory/v1/groups/*', { statusCode: 200 })
        .as('patchGroup');
    },
    'delete successful': () => {
        cy
        .intercept('DELETE', '/api/inventory/v1/groups/*', { statusCode: 204 })
        .as('deleteGroup');
    }
};

export const deleteGroupsInterceptors = {
    'successful deletion': () => {
        cy.intercept('DELETE', '/api/inventory/v1/groups/*', {
            statusCode: 204
        }).as('deleteGroups');
    },
    'failed deletion (invalid request)': () => {
        cy.intercept('DELETE', '/api/inventory/v1/groups/*', {
            statusCode: 400
        }).as('deleteGroups');
    }
};

export const hostsInterceptors = {
    successful: () => {
        cy.intercept('GET', '/api/inventory/v1/hosts*', {
            statusCode: 200,
            body: hostsFixtures
        }).as('getHosts');
    },
    'successful empty': () => {
        cy.intercept('GET', '/api/inventory/v1/hosts*', {
            statusCode: 200,
            body: {
                count: 0,
                page: 1,
                per_page: DEFAULT_ROW_COUNT,
                total: 0
            }
        }).as('getHosts');
    },
    'failed with server error': () => {
        Cypress.on('uncaught:exception', () => {
            return false;
        });
        cy.intercept('GET', '/api/inventory/v1/hosts*', { statusCode: 500 }).as(
            'getHosts'
        );
    }
};

export const systemProfileInterceptors = {
    'operating system, successful empty': () => {
        cy.intercept('GET', '/api/inventory/v1/system_profile/operating_system', {
            statusCode: 200,
            body: {
                results: []
            }
        }).as('getSystemProfile');
    }
};

export const featureFlagsInterceptors = {
    successful: () => {
        cy.intercept('GET', '/feature_flags*', {
            statusCode: 200,
            body: {
                toggles: []
            }
        }).as('getFeatureFlag');
    }
};

import React from 'react';
import { useContext, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import RegistryContext from '../store/registeryContext';
import { Alert, Button } from '@patternfly/react-core';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import { getDevice, getImageSet } from '../api/edge/imagesInfo';
import PropTypes from 'prop-types';

import { InProgressIcon } from '@patternfly/react-icons';
const VulnerabilityEdgePrompt = () => {
  const { getRegistry } = useContext(RegistryContext);
  const { inventoryId } = useParams();
  const [CVEs, setCVEs] = useState(null);
  const [imageId, setImageID] = useState(null);
  const [imageSetId, setImageSetID] = useState(null);
  const [deviceData, setDeviceData] = useState(null);
  const [newImageStatus, setNewImageStatus] = useState(null);
  useEffect(() => {
    if (CVEs?.data?.length > 0) {
      const data = getActiveAlert(CVEs, deviceData, newImageStatus, imageId);
      setActiveAlert(data);
    }
  });
  useEffect(() => {
    (async () => {
      const a = await getDevice(inventoryId);
      setDeviceData(a);
      setImageID(a?.ImageInfo?.Image?.ID);
      setImageSetID(a?.ImageInfo?.Image?.ImageSetID);
      const params = {
        id: 'view',
        q: { id: imageSetId },
      };
      const resp = await getImageSet(params);
      setNewImageStatus(resp?.data?.[0]?.Status);
    })();
  }, []);
  const [activeAlert, setActiveAlert] = useState('noAlert');

  const getActiveAlert = (CVEs, deviceData, newImageStatus, imageId) => {
    if (!CVEs?.data?.length > 0 || !imageId) {
      return 'noAlert';
    }
    if (
      deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||
      deviceData?.UpdateTransactions[0]?.Status === 'CREATED'
    ) {
      return 'systemUpdating';
    }
    if (deviceData?.Device?.UpdateAvailable) {
      return 'updateDevice';
    }
    if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {
      return 'imageBuilding';
    }
    return 'updateImage';
  };

  // useEffect(() => {
  //   !CVEs?.isLoading &&
  //     !CVEs?.meta?.filter &&
  //     setUpdateCveModal((prevState) => ({
  //       ...prevState,
  //       cveCount: CVEs?.data?.length,
  //     }));
  // }, [CVEs, deviceData, newImageStatus, imageId]);

  const alerts = {
    updateImage: (
      <Alert
        className="pf-u-mb-md"
        variant="info"
        isInline
        title="To remediate CVEs, update the image."
        actionLinks={
          <Button
            className="pf-u-mt-sm"
            isSmall
            onClick={(e) => {
              e.preventDefault();
              window.location.href = `insights/image-builder/manage-edge-images/${imageSetId}?update_image=true`;
            }}
          >
            Update Image
          </Button>
        }
      />
    ),
    imageBuilding: (
      <Alert
        className="pf-u-mb-md"
        customIcon={<InProgressIcon />}
        variant="info"
        isInline
        title="Image build in progress. Once completed, you'll need to update your system."
      />
    ),
    updateDevice: (
      <Alert
        className="pf-u-mb-md"
        variant="warning"
        isInline
        title=" Image build completed. Update system to the newest image version to remediate CVEs."
        actionLinks={
          <Button
            className="pf-u-mt-sm"
            isSmall
            onClick={(e) => {
              e.preventDefault();
              window.location.href = `insights/inventory/${inventoryId}/update`;
            }}
          >
            Update system
          </Button>
        }
      />
    ),
    systemUpdating: (
      <Alert
        className="pf-u-mb-md"
        customIcon={<InProgressIcon />}
        variant="info"
        isInline
        title="System updating. No additional actions required."
      />
    ),
    noAlert: '',
  };

  return (
    <section className="add-100vh pf-l-page__main-section pf-c-page__main-section">
      {alerts[activeAlert]}
      <AsyncComponent
        appName="vulnerability"
        module="./SystemDetail"
        getRegistry={getRegistry}
        customIntlProvider
        entity={{ id: inventoryId }}
        canSelect={false}
        canEditPairStatus={false}
        canManageColumns={false}
        linkToCustomerPortal
        defaultColumns={[
          'synopsis',
          'public_date',
          'impact',
          'cvss_score',
          'advisory',
        ]}
        filters={[
          'filter',
          'security_rule',
          'known_exploit',
          'impact',
          'cvss_score',
          'advisory',
        ]}
        customAction={(cve) => {
          setCVEs(cve);
        }}
      />
    </section>
  );
};

VulnerabilityEdgePrompt.propTypes = {
  imageId: PropTypes.number,
  deviceData: PropTypes.object,
  setUpdateModal: PropTypes.func,
  setReload: PropTypes.func,
};

export default VulnerabilityEdgePrompt;

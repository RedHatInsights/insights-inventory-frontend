import React from 'react';
import { useContext, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import RegistryContext from '../store/registeryContext';
import AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';
import { useGetDevice, useGetImageSet } from '../api/edge/imagesInfo';

import VulnerabilityEdgeAlert from './VulnerabilityEdgeAlert';
const VulnerabilityEdgePrompt = () => {
  const { getRegistry } = useContext(RegistryContext);
  const { inventoryId } = useParams();
  const [CVEs, setCVEs] = useState(null);
  const [imageId, setImageID] = useState(null);
  const [imageSetId, setImageSetID] = useState(null);
  const [deviceData, setDeviceData] = useState(null);
  const [newImageStatus, setNewImageStatus] = useState(null);
  const builtColumns = ['synopsis', 'public_date', 'impact', 'cvss_score'];
  const builtFilters = [
    'filter',
    'security_rule',
    'known_exploit',
    'impact',
    'cvss_score',
  ];
  useEffect(() => {
    if (CVEs?.data?.length > 0) {
      const data = getActiveAlert(CVEs, deviceData, newImageStatus, imageId);
      setActiveAlert(data);
    }
  });

  const getDevice = useGetDevice();
  const getImageSet = useGetImageSet();
  useEffect(() => {
    (async () => {
      const device = await getDevice(inventoryId);
      setDeviceData(device);
      setImageID(device?.ImageInfo?.Image?.ID);
      setImageSetID(device?.ImageInfo?.Image?.ImageSetID);
      const params = {
        imageSetParam: { id: device?.ImageInfo?.Image?.ImageSetID },
      };
      const resp = await getImageSet(params);
      setNewImageStatus(resp?.data?.[0]?.Status);
    })();
  }, []);
  const [activeAlert, setActiveAlert] = useState('noAlert');

  const getActiveAlert = (CVEs, deviceData, newImageStatus, imageId) => {
    if (!CVEs?.data?.length > 0 || !imageId) {
      return 'noAlert';
    }
    if (
      deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||
      deviceData?.UpdateTransactions[0]?.Status === 'CREATED'
    ) {
      return 'systemUpdating';
    }
    if (deviceData?.Device?.UpdateAvailable) {
      return 'updateDevice';
    }
    if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {
      return 'imageBuilding';
    }
    return 'updateImage';
  };

  return (
    <section className="add-100vh pf-v5-l-page__main-section pf-v5-c-page__main-section">
      <VulnerabilityEdgeAlert
        activeAlert={activeAlert}
        inventoryId={inventoryId}
        imageSetId={imageSetId}
      />

      <AsyncComponent
        appName="vulnerability"
        module="./SystemDetail"
        getRegistry={getRegistry}
        customIntlProvider
        entity={{ id: inventoryId }}
        canSelect={false}
        canEditPairStatus={false}
        canManageColumns={false}
        defaultColumns={builtColumns}
        filters={builtFilters}
        customAction={(cve) => {
          setCVEs(cve);
        }}
      />
    </section>
  );
};

export default VulnerabilityEdgePrompt;
